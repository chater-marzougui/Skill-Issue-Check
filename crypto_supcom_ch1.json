{
  "for_study": "\n\\section*{Cryptography}\n\\subsection*{Definitions}\n\\begin{itemize}\n    \\item \\textbf{Cryptography:} The science of using mathematics to encrypt and decrypt data, enabling secure storage and transmission of sensitive information across insecure networks (e.g., the Internet). It ensures that only the intended recipient can read the data.\n    \\item \\textbf{Cryptanalysis:} The science of analyzing and breaking secure communication. It involves analytical reasoning, mathematical tools, pattern finding, patience, determination, and sometimes luck.\n    \\item \\textbf{Cryptanalysts:} Also known as attackers, they attempt to break cryptographic systems.\n    \\item \\textbf{Cryptology:} The encompassing field that includes both cryptography and cryptanalysis.\n\\end{itemize}\n\n\\section*{Caesar Cipher}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item The Caesar cipher, also known as the shift cipher, Caesar's code, or Caesar shift, is a simple substitution cipher.\n    \\item It replaces each letter in the plaintext with a letter some fixed number of positions down the alphabet.\n    \\item Named after Julius Caesar.\n\\end{itemize}\n\\subsection*{Example}\n\\begin{itemize}\n    \\item  With a left shift of 3, 'D' becomes 'A', 'E' becomes 'B', and so on.\n\\end{itemize}\n\\subsection*{Representation}\n\nThe transformation can be represented by aligning two alphabets:\n\\begin{itemize}\n    \\item \\textbf{Plain Alphabet:} ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    \\item \\textbf{Cipher Alphabet (Left Shift 3):} XYZABCDEFGHIJKLMNOPQRSTUVW\n\\end{itemize}\n\n\\section*{ROT13}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item ROT13 (Rotate by 13 places) is a simple letter substitution cipher that replaces a letter with the 13th letter after it in the Latin alphabet.\n    \\item It is a special case of the Caesar cipher.\n    \\item Because there are 26 letters (2 x 13), ROT13 is its own inverse. Applying ROT13 twice returns the original text.\n    \\item  Provides virtually no cryptographic security and is often used as an example of weak encryption.\n\\end{itemize}\n\\subsection*{Example}\n\\begin{itemize}\n    \\item HELLO $\\xrightarrow{ROT13}$ URYYB\n\\end{itemize}\n\n\\section*{Scytale}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item A scytale is a tool used to perform a transposition cipher.\n    \\item It consists of a cylinder with a strip of parchment wound around it, on which a message is written.\n    \\item Used by the ancient Greeks and Spartans for military communication.\n\\end{itemize}\n\n\\section*{Vigenère Cipher}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item The Vigenère cipher encrypts alphabetic text using different Caesar ciphers based on the letters of a key.\n    \\item A Vigenère table (tabula recta) is used, containing the alphabet written out 26 times in different rows, each shifted cyclically.\n    \\item The alphabet used at each point in the encryption process depends on a repeating keyword.\n    \\item Kasiski's method provides a successful general attack on the Vigenère cipher.\n\\end{itemize}\n\n\\section*{ADFGVX Cipher}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item The ADFGVX cipher was a manually applied field cipher used by the Imperial German Army during World War I.\n    \\item It is an extension of an earlier cipher called ADFGX.\n    \\item It is a fractionating transposition cipher combining a modified Polybius square with a single columnar transposition.\n    \\item Named after the six letters used in the ciphertext: A, D, F, G, V, and X.\n    \\item Cryptanalyzed by Georges Painvin.\n\\end{itemize}\n\n\\section*{Enigma}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item The Enigma machine is a cipher device used in the early to mid-20th century for secure communication.\n    \\item Used extensively by Germany during World War II.\n    \\item It employs an electromechanical rotor mechanism to scramble the 26 letters of the alphabet.\n    \\item Plaintext is entered on a keyboard, and illuminated letters display the ciphertext. Entering ciphertext decrypts it back to plaintext.\n\\end{itemize}\n\n\\section*{Transposition}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item A transposition cipher (or permutation cipher) scrambles the positions of characters without changing the characters themselves.\n    \\item  Transposition ciphers reorder units of plaintext (characters or groups of characters) according to a regular system.\n    \\item Plaintexts can be rearranged using a key, making the message difficult to decipher without the key.\n\\end{itemize}\n\n\\section*{Substitution}\n\\subsection*{Description}\n\\begin{itemize}\n    \\item A substitution cipher replaces units of plaintext with ciphertext in a defined manner, using a key.\n    \\item  Units can be single letters, pairs of letters, triplets, etc.\n    \\item \\textbf{Simple Substitution Cipher:} Operates on single letters.\n    \\item \\textbf{Polygraphic Cipher:} Operates on larger groups of letters.\n    \\item \\textbf{Monoalphabetic Cipher:} Uses fixed substitution over the entire message.\n    \\item \\textbf{Polyalphabetic Cipher:} Uses multiple substitutions at different positions.\n\\end{itemize}\n\\section*{Kerckhoffs's Principle}\n\\begin{itemize}\n    \\item Kerckhoffs's principle states that a cryptosystem should be secure even if everything about the system, except the key, is public knowledge. It is also called Kerckhoffs's desideratum.\n    \\item Shannon's maxim: ``The enemy knows the system''. This emphasizes designing systems robust against attackers with full familiarity.\n\\end{itemize}\n\n\\section*{Perfect Secrecy}\n\\begin{itemize}\n    \\item Perfect secrecy, a property of the One-Time Pad (OTP), means the ciphertext gives no additional information about the plaintext.\n    \\item Given a truly uniformly random key (used only once), a ciphertext can be translated into any plaintext of the same length, with all being equally likely.  Thus:\n    \n    $P(M) = P(M|C)$ where M is the plaintext message and C is the corresponding ciphertext.\n\\end{itemize}\n\n\\section*{One-Time Pad (OTP)}\n\\begin{itemize}\n    \\item An encryption technique that cannot be cracked, requiring a single-use pre-shared key at least as long as the message.\n    \\item Plaintext is combined with a random secret key (the OTP) using modular addition.\n    \\item Conditions for unbreakable security:\n    \\begin{enumerate}\n        \\item Key at least as long as the plaintext.\n        \\item Key must be truly random.\n        \\item Key must never be reused.\n        \\item Key must be kept completely secret.\n    \\end{enumerate}\n\\end{itemize}\n\n\\section*{One-Time Pad Problems}\n\\begin{itemize}\n    \\item Drawbacks in practice:\n    \\begin{enumerate}\n        \\item Truly random key generation is difficult.\n        \\item Secure generation and exchange of the key (as long as the message) is a challenge.\n        \\item Careful key management to prevent reuse or compromise is critical.\n    \\end{enumerate}\n\\end{itemize}\n\n\\section*{Confusion}\n\\begin{itemize}\n    \\item Each ciphertext bit depends on multiple parts of the key, obscuring the connection between them.\n    \\item Hides the relationship between ciphertext and key.\n    \\item Makes finding the key from the ciphertext difficult; a single bit change in the key significantly affects the ciphertext.\n    \\item Increases the ambiguity of ciphertext, used in both block and stream ciphers.\n    \\item In Substitution-Permutation Networks (SPNs), confusion is provided by substitution boxes (S-boxes).\n\\end{itemize}\n\n\\section*{Diffusion}\n\\begin{itemize}\n    \\item Changing a single bit of the plaintext should change about half the ciphertext bits (and vice-versa).  This is the avalanche effect.\n    \\item Purpose: to hide the statistical relationship between the ciphertext and plaintext, removing patterns.\n    \\item Achieved in block ciphers by diffusing plaintext structure across rows and columns.\n\\end{itemize}\n\n\\section*{Symmetric Cryptography}\n\\begin{itemize}\n    \\item Uses the same cryptographic key for encryption and decryption.\n    \\item Keys may be identical or easily derived from each other, representing a shared secret.\n    \\item Drawback: Both parties need access to the secret key.\n    \\item TODO: Add image/diagram of Symmetric cryptography.\n\\end{itemize}\n\n\\section*{Key Establishment}\n\\begin{itemize}\n    \\item Symmetric-key algorithms require sender and receiver to share the same secret key, often through a physically secure channel initially.\n    \\item Modern systems often use Diffie-Hellman or other public-key protocols to securely agree on a session key (forward secrecy), avoiding the need for a constant physically secure channel.\n\\end{itemize}\n\n\\section*{Key Generation}\n\\begin{itemize}\n    \\item When used with asymmetric ciphers for key transfer, pseudorandom key generators are used to generate the symmetric cipher session keys.\n    \\item Lack of randomness can lead to cryptanalytic breaks; high entropy is essential for initialization.\n\\end{itemize}\n\n\\section*{Asymmetric Cryptography}\n\\begin{itemize}\n    \\item Public-key cryptography uses pairs of related keys: a public key and a private key.\n    \\item Key pairs generated by cryptographic algorithms based on one-way functions. Security relies on keeping the private key secret.\n    \\item Anyone can encrypt with the public key, but only the holder of the private key can decrypt.\n\\end{itemize}\n\n\\section*{Digital Signature}\n\\begin{itemize}\n    \\item A mathematical scheme for verifying the authenticity of digital messages.\n    \\item Provides confidence that the message came from a known sender.\n     \\item TODO: Add Image/diagram of digital signature creation and verification from the provided document.\n\\end{itemize}\n\\section{Digital Signature}\n\\begin{itemize}\n    \\item A digital signature scheme consists of three algorithms:\n    \\begin{enumerate}\n        \\item \\textbf{Key Generation}: Selects a private key uniformly at random and outputs the private key and corresponding public key.\n        \\item \\textbf{Signing}: Given a message and a private key, produces a signature.\n        \\item \\textbf{Verification}: Given the message, public key, and signature, either accepts or rejects the message's claim to authenticity.\n    \\end{enumerate}\n\\end{itemize}\n\n\\section{Security Properties}\n\\begin{itemize}\n    \\item \\textbf{Confidentiality}: Ensures information is not disclosed to unauthorized entities. Achieved through encryption.\n    \\item \\textbf{Integrity}: Protects the accuracy and completeness of data during transmission and storage, preventing unauthorized alteration or destruction.\n    \\item \\textbf{Authenticity}: Establishes the validity of a transmission, message, or originator. Prevents impersonation through user identification and confirmation.\n    \\item \\textbf{Non-Repudiation}: Provides proof of delivery and sender's identity, preventing either party from denying sending, receiving, or accessing data.\n\\end{itemize}\n\n\\section{Data Encryption Standard (DES)}\n\\begin{itemize}\n    \\item \\textbf{DES}: A symmetric-key algorithm for encrypting digital data.\n    \\item Developed in the early 1970s at IBM based on Horst Feistel's design.\n    \\item The algorithm was submitted to the National Bureau of Standards (NBS) for the protection of sensitive data.\n    \\item The NBS selected a slightly modified version (strengthened against differential cryptanalysis, but weakened against brute-force attacks) in 1976.\n    \\item Published as an official Federal Information Processing Standard (FIPS) for the United States in 1977.\n    \\item Insecure due to the short 56-bit key size, making it vulnerable to brute-force attacks.\n    \\item  It is believed to be practically secure in the form of \\textbf{Triple DES}, although there are theoretical attacks.\n    \\item \\textbf{DES is the archetypal block cipher}:  It takes a fixed-length string of plaintext bits and transforms it through a series of complicated operations into another ciphertext bitstring of the same length.  The block size is 64 bits.\n    \\item DES uses a key to customize the transformation, so that decryption can supposedly only be performed by those who know the particular key used to encrypt. The key ostensibly consists of 64 bits; however, only 56 of these are actually used by the algorithm.\n    \\item Eight bits are used solely for checking parity, and are thereafter discarded. Hence the effective key length is 56 bits.\n\\end{itemize}\n\n\\section{Feistel Cipher}\n\\begin{itemize}\n    \\item \\textbf{Feistel Cipher}: A symmetric structure used in the construction of block ciphers.\n    \\item Named after Horst Feistel. Also known as Luby-Rackoff block cipher or Feistel network.\n    \\item Many block ciphers use this scheme, including DES, GOST, Blowfish, and Twofish.\n    \\item Encryption and decryption are very similar operations, iteratively running a \"round function\" a fixed number of times.\n    \\item TODO: Insert Feistel cipher diagram from page 5\n\\end{itemize}\n\n\\section{DES F-Function}\n\\begin{itemize}\n    \\item The F-function operates on half a block (32 bits) at a time and consists of four stages:\n    \\begin{enumerate}\n        \\item \\textbf{Expansion}: The 32-bit half-block is expanded to 48 bits using the expansion permutation (E), duplicating half of the bits. TODO: Insert diagram for expansion permutation from page 8.\n        \\item \\textbf{Key Mixing}: The result is combined with a subkey using an XOR operation. Sixteen 48-bit subkeys (one for each round) are derived from the main key using the key schedule.\n        \\item \\textbf{Substitution}: After mixing in the subkey, the block is divided into eight 6-bit pieces before processing by the S-boxes (substitution boxes). Each S-box replaces its six input bits with four output bits according to a non-linear transformation, provided in the form of a lookup table. TODO: Insert diagram for S-boxes from page 9.\n        \\item \\textbf{Permutation}: Finally, the 32 outputs from the S-boxes are rearranged according to a fixed permutation (P-box). This is designed so that bits from the output of each S-box in this round are spread across four different S-boxes in the next round.\n    \\end{enumerate}\n\\end{itemize}\n\n\\section{DES Key Schedule}\n\\begin{itemize}\n    \\item The key schedule for encryption generates the subkeys.\n    \\item Initially, 56 bits of the key are selected from the initial 64 by Permuted Choice 1 (PC-1); the remaining eight bits are discarded or used as parity check bits.\n    \\item The 56 bits are then divided into two 28-bit halves; each half is treated separately. In successive rounds, both halves are rotated left by one or two bits (specified for each round), and then 48 subkey bits are selected by Permuted Choice 2 (PC-2); 24 bits from the left half, and 24 from the right.\n    \\item The key schedule for decryption is similar; the subkeys are in reverse order compared to encryption.\n    \\item TODO: Insert diagram for Key schedule from page 10\n\\end{itemize}\n\n\\section{Advanced Encryption Standard (AES)}\n\\begin{itemize}\n    \\item \\textbf{AES}: Also known as Rijndael, a specification for the encryption of electronic data established by NIST in 2001.\n    \\item A variant of the Rijndael block cipher developed by Joan Daemen and Vincent Rijmen.\n    \\item Rijndael is a family of ciphers with different key and block sizes. For AES, NIST selected three members of the Rijndael family, each with a block size of 128 bits, but three different key lengths: 128, 192 and 256 bits.\n    \\item TODO: Insert AES structure diagram from page 11\n\\end{itemize}\n\n\\section{AES Rounds}\n\\begin{enumerate}\n    \\item KeyExpansion: Round keys are derived from the cipher key using the AES key schedule. AES requires a separate 128-bit round key block for each round plus one more.\n    \\item Initial round key addition: AddRoundKey – each byte of the state is combined with a byte of the round key using bitwise xor.\n    \\item 9, 11 or 13 rounds:\n    \\begin{itemize}\n        \\item SubBytes: A non-linear substitution step where each byte is replaced with another according to a lookup table.\n        \\item ShiftRows: A transposition step where the last three rows of the state are shifted cyclically a certain number of steps.\n        \\item MixColumns: A linear mixing operation which operates on the columns of the state, combining the four bytes in each column.\n        \\item AddRoundKey\n    \\end{itemize}\n    \\item Final round (making 10, 12 or 14 rounds in total):\n        \\begin{itemize}\n            \\item SubBytes\n            \\item ShiftRows\n            \\item AddRoundKey\n        \\end{itemize}\n\\end{enumerate}\n\\\\section*{AES Steps}\\n\\n\\\\subsection*{SubBytes}\\nThe SubBytes step involves substituting each byte in the state matrix with a corresponding value from an S-box. This substitution is a non-linear transformation that provides confusion.\\n\\nTODO: Add image of SubBytes step. Get it from the document.\\n\\n\\\\subsection*{ShiftRows}\\nThe ShiftRows step cyclically shifts the rows of the state matrix to the left. The first row is not shifted, the second row is shifted by one byte, the third row by two bytes, and the fourth row by three bytes. This step provides diffusion.\\n\\nTODO: Add image of ShiftRows step. Get it from the document.\\n\\n\\\\subsection*{MixColumns}\\nThe MixColumns step mixes the bytes in each column of the state matrix using a linear transformation. This step provides further diffusion.\\n\\nTODO: Add image of MixColumns step. Get it from the document.\\n\\n\\\\subsection*{AddRoundKey}\\nThe AddRoundKey step XORs the state matrix with a round key derived from the main key using Rijndael's key schedule.\\n\\nTODO: Add image of AddRoundKey step. Get it from the document.\\n\\n\\\\section*{Blowfish}\\nBlowfish is a symmetric-key block cipher designed in 1993. It provides a good encryption rate in software. It is recommended not to use it for files larger than 4GB.\\n\\n\\\\section*{Twofish}\\nTwofish is a symmetric key block cipher with a block size of 128 bits and key sizes up to 256 bits. It uses pre-computed key-dependent S-boxes and a complex key schedule.\\n\\nTODO: Add image of Twofish algorithm step. Get it from the document.\\n\\n\\\\section*{Message Authentication}\\n\\\\subsection*{Introduction}\\nEncryption protects against passive attacks (snooping). Message authentication protects against active attacks (falsification of data and transactions).\\n\\\\subsection*{Message Authentication Codes (MAC)}\\nSource and destination share a secret key K. The source calculates the MAC using a function \\(F(K, m)\\), where \\(m\\) is the message. The recipient verifies the MAC.\\n\\\\[MAC_m = F(K, m)\\\\]\\n\\nTODO: Add image of MAC algorithm step. Get it from the document.\\n\\n\\\\subsection*{Secure (Cryptographic) Hash Functions}\\nHash functions accept a variable-size input message and produce a fixed-size message digest. Unlike MACs, hash functions do not take a secret key as input.\\nTo authenticate a message, the authenticated hash value is sent with the message.\\n\\\\[h_m = H(m)\\\\]\\n\\nTODO: Add image of Hash function step. Get it from the document.\\n\\n\\\\subsection*{Authentication with a Hash Function}\\nEnsuring message authentication and confidentiality. A change in any bit of m results in a different hash value.\\n\\nTODO: Add image of Authentication with a Hash Function step. Get it from the document.\n\\section{Authentication with Hash Functions}\\n\\n\\subsection{Message Authentication Only}\\n\\n*   Using encryption and a hash function.  $E[K, H(m)]$ implements the MAC functionality (TODO: insert image depicting this).\\n\\n\\subsection{Message Authentication Without Encryption}\\n\\n*   Authentication relies on a shared secret S. The hash function $H(.)$ is used to generate a MAC: $H(m || S)$.  This is more efficient than encryption.\\n*   Assumption: Source and destination share a secret $S$ (TODO: insert image depicting this).\\n\\n\\subsection{Hash Function Requirements}\\n\\n*   Hash functions produce a unique \\\\\n\\section{Public-Key Certificates}\n\n\\subsection{Certificate Structure}\n\\begin{itemize}\n    \\item Public Key: The public key of the entity being certified.\n    \\item Public Key Owner (User ID): Identifies the owner of the public key.\n    \\item Certificate Issuer: The entity that issued the certificate (Certification Authority - CA).\n    \\item Date of Issuing: The date when the certificate was issued.\n    \\item Certificate Validity Period: The period during which the certificate is valid.\n    \\item Other Information: Additional information like type, standards, etc.\n    \\item Digital Signature of the Certificate Issuer: Ensures the integrity and authenticity of the certificate.  It's created by the CA's private key.\n\\end{itemize}\n\nTODO: Add an image here showing the structure of the certificate like on page 1\n\n\\subsection{The X.509 Standard}\n\n\\begin{itemize}\n    \\item A widely used standard for public-key certificates.\n    \\item Used in: IPSec (network), SSL/TLS (web), S/MIME (email).\n\\end{itemize}\n\n\\subsection{Verifying Public-Key Certificates}\n\nTo verify a certificate:\n\n\\begin{enumerate}\n    \\item Generate hash value of unsigned certificate using a hash function $H$.\n    \\item Encrypt the hash value with the CA's private key ($PR_{CA}$) to create the signature.\n    \\item The signed certificate contains Bob's ID, Bob's public key ($PU_B$), Certification Authority (CA) Info and the signature.\n    \\item To verify the certificate, decrypt the signature with the CA's public key ($PU_{CA}$) to recover the hash value.\n    \\item Compute the hash value of the received certificate information.\n    \\item Compare the decrypted hash value with the computed hash value. If they match, the certificate is valid.\n\\end{enumerate}\n\nTODO: Add an image here showing the process to verify the certificate like on page 2\n\n\\subsection{Examples}\n\nTODO: Add images here of examples of certificate information and details like on page 3\n\n\\section{Digital Envelopes}\n\n\\begin{itemize}\n    \\item Use public-key encryption to distribute secret keys.\n    \\item Secret keys are more efficient and faster for symmetric encryption.\n    \\item Scenario: B wishes to send a confidential message $m$ to A.\n\\end{itemize}\n\nProcess:\n\n\\begin{enumerate}\n    \\item A and B do not share any symmetric key.\n    \\item B holds an authentic public key $PU_A$ of A.\n    \\item B prepares the message $m$ and generates a one-time (session) symmetric key $K$.\n    \\item B encrypts $m$: $c_m = E[K,m]$\n    \\item B encrypts the session key $K$ using A's $PU_A$: $c_K = E[PU_A,K]$\n    \\item B forms a digital envelope $Env = (c_m, c_K)$ and sends it to A.\n    \\item Only A is capable of decrypting the session key from $c_K$ and therefore of recovering the original message $m$ from $c_m$.\n\\end{enumerate}\n\nExample: Windows XP Encrypting File System (EFS).\n\nTODO: Add an image here showing the digital envelope process like on page 5\n\n\n\\section{Electronic Signatures}\n\n\\subsection{ETSI TS 119 101 V1.1.1 (2016-03)}\n\n\\begin{itemize}\n    \\item Electronic Signatures and Infrastructures (ESI): Policy and security requirements for applications for signature creation and signature validation.\n\\end{itemize}\n\n\\subsection{E-signature groups}\n\nElectronic signatures can be divided into three groups:\n\n\\begin{itemize}\n    \\item Simple electronic signatures: include scanned signatures and tickbox plus declaration.\n    \\item Advanced electronic signatures: can identify the user, are unique to them, are under the sole control of the user, and are attached to a document in a way that it becomes invalidated if the contents are changed.\n        \\begin{itemize}\n            \\item Are uniquely linked to the signatory.\n            \\item Are capable of identifying the signatory.\n            \\item Are created using means that the signatory may maintain under his sole control.\n            \\item Are linked to the data to which it relates in such a manner that any subsequent change of the data is detectable.\n        \\end{itemize}\n    \\item Qualified electronic signatures: an advanced electronic signature with a digital certificate encrypted by a secure signature creation device e.g. smart card.\n\\end{itemize}\n\n\\subsection{Electronic signature standards}\n\nFour standards dominate the e-signature market:\n\n\\begin{itemize}\n    \\item PADES\n    \\item CADES\n    \\item XADES\n    \\item ASIC\n\\end{itemize}\n\n\\subsection{XML Advanced Electronic Signatures (XAdES)}\n\nTo protect the validity of signature in time, four levels are defined:\n\n\\begin{enumerate}\n    \\item XAdES-BASELINE-B: Basic Electronic Signature. The lowest and simplest version just containing the SignedInfo, SignatureValue, KeyInfo and SignedProperties. Combines old –BES and -EPES levels.\n    \\item XAdES-BASELINE-T: Signature timestamp. A timestamp regarding the time of signing is added to protect against repudiation.\n    \\item XAdES-BASELINE-LT: Long Term level. Certificates and revocation data are embedded to allow verification in future even if their original source is not available. Equivalent to the old -XL level.\n    \\item XAdES-BASELINE-LTA: Long Term with Archive timestamp. By using periodical timestamping (e.g. each year) compromising is prevented which could be caused by weakening previous signatures during a long-time storage period. Equivalent to the old -A level.\n\\end{enumerate}\n\nTODO: Add images of the structure of the signatures XAdES-B and XAdES-T like on page 11 and 12\n\n\\section{XAdES}\nXAdES (XML Advanced Electronic Signatures) is a set of extensions to the XML Signature standard. These extensions provide ways to ensure the long-term validity of digital signatures, even if the underlying cryptographic algorithms become obsolete or the certificates expire.\n\\begin{itemize}\n    \\item \\textbf{XAdES-LT (Long Term)}: Includes information to validate the signature in the future, even if the original certificates have expired. It contains:\n    \\begin{itemize}\n        \\item SigningCertificate: Identifies the certificate used to create the signature.\n        \\item SignerRole: Indicates the role of the signer.\n        \\item SignaturePolicyId: References the policy under which the signature was created.\n        \\item SignatureTimeStamp: Timestamp applied to the signature itself.\n        \\item CompleteCertificateRefs: References to all certificates needed to validate the signature.\n        \\item CompleteRevocationRefs: References to all revocation information (e.g., CRLs, OCSP responses) needed to validate the signature.\n        \\item SigAndRefsTimeStamp: Timestamp applied to the signature and the references to certificates and revocation information.\n    \\end{itemize}\n    \\item \\textbf{XAdES-LTA (Long Term Archival)}: Includes all the information from XAdES-LT, plus:\n    \\begin{itemize}\n        \\item CertificateValues: Contains the actual certificate values.\n        \\item RevocationValues: Contains the actual revocation information values.\n        \\item ArchiveTimeStamp: Timestamp applied to all the cryptographic evidence to protect against future algorithm compromise. This is the key element for long-term archival.\n    \\end{itemize}\n\\end{itemize}\n\n\\section{Other Signature Standards}\n\\begin{itemize}\n    \\item \\textbf{PAdES (PDF Advanced Electronic Signatures)}: Signatures embedded within PDF documents, compliant with ISO 32000-1.  Supports XML data, serial form filling, and long-term validity.  Visual appearance can be included in the PDF content.  TODO: insert a picture of PAdES from the document\n    \\item \\textbf{CAdES (CMS Advanced Electronic Signatures)}: Extends CMS (Cryptographic Message Syntax, based on PKCS#7). Supports signing any data, including PDF, and uses binary data format. Offers two signing methods:\n    \\begin{itemize}\n        \\item Detached: Signature is separate from the data.\n        \\item Encapsulated: Data is wrapped inside the signature structure.\n    \\end{itemize} TODO: insert a picture of CAdES from the document\n\\end{itemize}\n\n\\section{Signature Creation and Verification Environments (ETSI)}\nETSI (European Telecommunications Standards Institute) defines environments for signature creation, verification, and augmentation.\n\\begin{itemize}\n    \\item \\textbf{Signature Creation Environment}:  Includes the driving application (DA), signature creation system (SCA), user interface, signature creation device (SCDev), and interfaces. TODO: Insert Signature Creation Environment Diagram from the document.\n    \\item \\textbf{Signature Verification Environment}:  Includes the driving application (DA), signature validation application (SVA), and user interface. TODO: Insert Signature Verification Environment Diagram from the document.\n    \\item \\textbf{Signature Augmentation Environment}:  Includes the driving application (DA), signature augmentation application (SAA), and user interface. TODO: Insert Signature Augmentation Environment Diagram from the document.\n\\end{itemize}\n\n\\section{Cryptographic Protocols}\n\\subsection{Kerberos}\nKerberos is a network authentication protocol based on tickets.  It uses symmetric-key cryptography and optionally public-key cryptography. Provides mutual authentication between client and server.\n\\begin{itemize}\n    \\item  Protects against eavesdropping and replay attacks.\n    \\item  Requires a trusted third party (Key Distribution Center - KDC).\n    \\item  Uses UDP port 88 by default.\n\\end{itemize}\n\n\\textbf{Workflow:}\n\\begin{enumerate}\n    \\item Client (C) requests a ticket for a service from the Authentication Server (AS) within the KDC.\n    \\item AS authenticates the client and issues a Ticket Granting Ticket (TGT) encrypted with the Ticket Granting Server's (TGS) key, along with a session key encrypted with the client's key.\n    \\item Client presents the TGT to the TGS to request a service ticket.\n    \\item TGS issues a service ticket encrypted with the service server's key and a session key encrypted with the client's key.\n    \\item Client presents the service ticket to the Service Server (SS) to access the service.\n\\end{enumerate}\n\nTODO: Insert Kerberos message exchange diagram from the document.\n\n\\subsection{WEP (Wired Equivalent Privacy)}\nWired Equivalent Privacy (WEP) is a flawed security algorithm for 802.11 wireless networks.\n\\begin{itemize}\n    \\item Used 40-bit or 104-bit keys (10 or 26 hexadecimal digits).\n    \\item Has severe design flaws and is considered insecure.\n    \\item WEP2 also proved insecure.\n\\end{itemize}\n\n\\section*{WPA, WPA2, and WPA3}\n\\begin{itemize}\n    \\item Wi-Fi Protected Access (WPA), WPA2, and WPA3 are security certification programs for wireless computer networks, developed by the Wi-Fi Alliance after 2000.\n    \\item WPA (TKIP standard) was introduced in 2003 as an intermediate measure before WPA2.\n\\end{itemize}\n\n\\section*{WPA2}\n\\begin{itemize}\n    \\item Ratified in 2004, WPA2 replaced WPA and implements mandatory elements of IEEE 802.11i, including support for CCMP (AES-based encryption).\n    \\item Secure communication in WPA2 involves a multi-step process: devices associate with the Access Point (AP), followed by a 4-way handshake to verify the Pre-Shared Key (PSK) and generate a Pairwise Transient Key (PTK) for secure data exchange.\n\\end{itemize}\n\n\\section*{TKIP}\n\\begin{itemize}\n    \\item Temporal Key Integrity Protocol (TKIP) is a security protocol used in IEEE 802.11 wireless networking.\n    \\item TKIP was designed as an interim solution to replace WEP without replacing legacy hardware.\n    \\item TKIP is no longer considered secure and was deprecated in the 2012 revision of the 802.11 standard.\n\\end{itemize}\n\n\\section*{Cryptanalysis Categories}\n\\begin{itemize}\n    \\item Cryptanalysis breaches security systems to access encrypted messages without knowing the key.\n    \\item \\textbf{Ciphertext-only attack (COA)}: The attacker only has ciphertexts.\n    \\item \\textbf{Known-plaintext attack (KPA)}: The attacker knows some plaintext-ciphertext pairs. The plaintext is also known as \\textit{crib}.\n    \\item \\textbf{Chosen-plaintext attack (CPA)}: The attacker can obtain ciphertexts for chosen plaintexts, possibly by interacting with an encryption oracle.\n    \\item \\textbf{Adaptive chosen-plaintext attack}: Like CPA, but the attacker chooses subsequent plaintexts based on information learned from previous encryptions.\n    \\item \\textbf{Related-key attack}: The attacker can obtain ciphertexts encrypted under different keys with a known relationship.\n\\end{itemize}\n\n\\section*{Ciphertext-only attack (COA)}\n\\begin{itemize}\n    \\item The attacker only has access to a set of ciphertexts.\n    \\item The attacker likely has some knowledge of the plaintext, like the language or statistical distribution of characters.\n\\end{itemize}\n\n\\section*{Known-plaintext attack (KPA)}\n\\begin{itemize}\n    \\item The attacker has access to both the plaintext (crib) and its encrypted version (ciphertext).\n    \\item The crib can be used to reveal secret keys and codebooks.\n\\end{itemize}\n\n\\section*{Chosen-plaintext attack (CPA)}\n\\begin{itemize}\n    \\item The attacker can obtain the ciphertexts for arbitrary plaintexts.\n    \\item Modern ciphers aim for semantic security (ciphertext indistinguishability under CPA).\n\\end{itemize}\n\n\\section*{Adaptive chosen-plaintext attack}\n\\begin{itemize}\n    \\item The attacker can choose $n$ plaintexts and send them to the encryption oracle, and receives the ciphertexts back.\n    \\item Using the plaintext-ciphertext pairs, the attacker tries to extract the key.\n\\end{itemize}\n\n\\section*{Related-key attack}\n\\begin{itemize}\n    \\item The attacker observes the cipher's operation under different keys, where the keys have a mathematical relationship.\n\\end{itemize}",
  "in_exam": "\n\\section*{Cryptography}\n\\begin{itemize}\n    \\item \\textbf{Cryptography:} Encryption/Decryption.\n    \\item \\textbf{Cryptanalysis:} Breaking encryption.\n    \\item \\textbf{Cryptology:} Both.\n\\end{itemize}\n\n\\section*{Caesar Cipher}\n\\begin{itemize}\n    \\item Shift cipher.\n    \\item Example: A $\\rightarrow$ D (shift by 3).\n\\end{itemize}\n\n\\section*{ROT13}\n\\begin{itemize}\n    \\item Caesar cipher with shift 13.\n    \\item Self-inverse.\n    \\item Weak encryption.\n    \\item HELLO $\\rightarrow$ URYYB\n\\end{itemize}\n\n\\section*{Scytale}\n\\begin{itemize}\n    \\item Transposition cipher using a cylinder.\n\\end{itemize}\n\n\\section*{Vigenère Cipher}\n\\begin{itemize}\n    \\item Uses multiple Caesar ciphers with a key.\n    \\item Vigenère table (tabula recta).\n\\end{itemize}\n\n\\section*{ADFGVX Cipher}\n\\begin{itemize}\n    \\item Field cipher (WWI).\n    \\item Fractionating transposition.\n\\end{itemize}\n\n\\section*{Enigma}\n\\begin{itemize}\n    \\item Rotor-based encryption machine (WWII).\n\\end{itemize}\n\n\\section*{Transposition}\n\\begin{itemize}\n    \\item Scrambles character positions.\n\\end{itemize}\n\n\\section*{Substitution}\n\\begin{itemize}\n    \\item Replaces plaintext with ciphertext.\n    \\item Simple, Polygraphic, Monoalphabetic, Polyalphabetic.\n\\end{itemize}\n\\section*{Kerckhoffs's Principle}\n\\begin{itemize}\n    \\item System should be secure even if everything except the key is public.\n    \\item Shannon's maxim: ``The enemy knows the system''.\n\\end{itemize}\n\n\\section*{Perfect Secrecy}\n\\begin{itemize}\n    \\item Ciphertext gives no information about the plaintext. $P(M) = P(M|C)$\n    \\item Requires truly random, single-use key.\n\\end{itemize}\n\n\\section*{One-Time Pad (OTP)}\n\\begin{itemize}\n    \\item Unbreakable encryption with single-use key.\n    \\item Key requirements: Length $\\geq$ plaintext, truly random, never reused, kept secret.\n\\end{itemize}\n\n\\section*{OTP Problems}\n\\begin{itemize}\n    \\item Random key generation, secure exchange, and management are difficult.\n\\end{itemize}\n\n\\section*{Confusion}\n\\begin{itemize}\n    \\item Ciphertext bits depend on multiple key parts.\n    \\item Hides key-ciphertext relationship.\n    \\item S-boxes provide confusion in SPNs.\n\\end{itemize}\n\n\\section*{Diffusion}\n\\begin{itemize}\n    \\item Change 1 plaintext bit $\\approx$ change 1/2 ciphertext bits (avalanche effect).\n    \\item Hides plaintext patterns.\n\\end{itemize}\n\n\\section*{Symmetric Cryptography}\n\\begin{itemize}\n    \\item Same key for encryption and decryption.\n    \\item Key must be shared.\n\\end{itemize}\n\n\\section*{Key Establishment}\n\\begin{itemize}\n    \\item Requires secure key exchange (e.g., Diffie-Hellman).\n    \\item Forward secrecy: New key for each session.\n\\end{itemize}\n\n\\section*{Key Generation}\n\\begin{itemize}\n    \\item Requires high entropy source for initialization.\n    \\item Avoid pseudorandom generators for keys.\n\\end{itemize}\n\n\\section*{Asymmetric Cryptography}\n\\begin{itemize}\n    \\item Public and private key pair.\n    \\item Public key encrypts, private key decrypts.\n\\end{itemize}\n\n\\section*{Digital Signature}\n\\begin{itemize}\n    \\item Verifies message authenticity.\n    \\item Ensures message came from the claimed sender.\n\\end{itemize}\n\\section{Digital Signature}\n\\begin{itemize}\n    \\item Key Generation, Signing, Verification algorithms\n\\end{itemize}\n\n\\section{Security Properties}\n\\begin{itemize}\n    \\item Confidentiality, Integrity, Authenticity, Non-Repudiation\n\\end{itemize}\n\n\\section{Data Encryption Standard (DES)}\n\\begin{itemize}\n    \\item Symmetric-key algorithm, 56-bit key, FIPS standard, Triple DES\n    \\item Block size: 64 bits\n\\end{itemize}\n\n\\section{Feistel Cipher}\n\\begin{itemize}\n    \\item Symmetric structure, round function, DES, GOST, Blowfish, Twofish\n\\end{itemize}\n\n\\section{DES F-Function}\n\\begin{itemize}\n    \\item Expansion (E), Key Mixing (XOR), Substitution (S-boxes), Permutation (P-box)\n\\end{itemize}\n\n\\section{DES Key Schedule}\n\\begin{itemize}\n    \\item PC-1, PC-2, rotations, subkey generation\n\\end{itemize}\n\n\\section{Advanced Encryption Standard (AES)}\n\\begin{itemize}\n    \\item Rijndael, NIST standard, 128-bit block, 128/192/256-bit keys\n\\end{itemize}\n\n\\section{AES Rounds}\n\\begin{itemize}\n    \\item KeyExpansion, AddRoundKey, SubBytes, ShiftRows, MixColumns\n\\end{itemize}\n\\\\section*{AES}\\n\\\\textbf{Steps:} SubBytes (S-box substitution - Confusion), ShiftRows (Cyclic row shift - Diffusion), MixColumns (Column mixing - Diffusion), AddRoundKey (XOR with round key).\\n\\n\\\\section*{Blowfish}\\nSymmetric-key block cipher. Not for files > 4GB.\\n\\n\\\\section*{Twofish}\\nSymmetric key block cipher (128-bit block, up to 256-bit key). Key-dependent S-boxes.\\n\\n\\\\section*{Message Authentication}\\n\\\\subsection*{MAC}\\nShared key \\(K\\). \\(MAC_m = F(K, m)\\). Recipient verifies.\\n\\n\\\\subsection*{Hash Functions}\\nVariable-size input, fixed-size output. No key. \\(h_m = H(m)\\).\\n\n\\section{Hash Functions}\\n\\n*   \\textbf{One-way}: Given $h$, hard to find $m$ where $H(m) = h$.\\n*   \\textbf{Weak Collision}: Given $m$, hard to find $m'$ where $H(m) = H(m')$.\\n*   \\textbf{Strong Collision}: Hard to find any $(m, m')$ where $H(m) = H(m')$.\\n*   SHA-1 (160 bit, weak), SHA-2 (SHA-256, SHA-384, SHA-512 - stronger).\\n*   Applications: Password hashing, integrity, digital signatures, commitments.\\n\\n\\section{Public Key Crypto}\\n\\n*   \\textbf{Symmetric}: $K_{enc} = K_{dec}$\\n*   \\textbf{Asymmetric (Public Key)}: $K_{enc} \\neq K_{dec}$.  Public key for encryption, private key for decryption.\\n\\n\\subsection{Algorithms}\\n\\n*   \\textbf{RSA}: Encryption/Signatures.\\n*   \\textbf{Diffie-Hellman}: Key Exchange only.\\n*   \\textbf{DSS}: Digital Signatures only (with SHA-1).\\n*   \\textbf{ECC}: Similar to RSA, smaller keys.\\n\\n\\subsection{Confidentiality}\\n\\n*   A encrypts with B's Public Key ($PU_B$).  Only B (with $PR_B$) can decrypt.\\n\\n\\subsection{Integrity (Authentication)}\\n\\n*   A encrypts with A's Private Key ($PR_A$).  B decrypts with A's Public Key ($PU_A$).  Proves A sent the message.\\n\\n\\subsection{Confidentiality \\& Integrity}\\n\\n*   $c = E[PR_A, m], c' = E[PU_B, c]$\\n*   $c = D[PR_B, c'], m = D[PU_A, c]$\\n\\n\\section{Certificates}\\n\\n*   CA signs certificates (Public Key + User ID).\\n*   Verify public keys using trusted CA's signature.\n\\section{Public-Key Certificates}\n\\begin{itemize}\n    \\item Structure: Public Key, Owner, Issuer, Date, Validity, Signature of Issuer.\n    \\item X.509: Standard for certificates.\n\\end{itemize}\n\n\\subsection{Verification}\n\\begin{enumerate}\n    \\item Hash(Unsigned Certificate)\n    \\item Encrypt with CA's Private Key (Signature)\n    \\item Decrypt Signature with CA's Public Key\n    \\item Compare Hashes.\n\\end{enumerate}\n\n\\section{Digital Envelopes}\n\n\\begin{itemize}\n    \\item Distribute secret keys using public-key encryption.\n    \\item B sends to A: $Env = (c_m, c_K)$ where $c_m = E[K,m]$ and $c_K = E[PU_A,K]$\n\\end{itemize}\n\n\\section{Electronic Signatures}\n\n\\subsection{E-signature Groups}\n\n\\begin{itemize}\n    \\item Simple\n    \\item Advanced: unique, under sole control, invalidates if content changes.\n    \\item Qualified: Advanced + digital certificate.\n\\end{itemize}\n\n\\subsection{XAdES}\n\n\\begin{itemize}\n    \\item BASELINE-B: Basic signature (SignedInfo, SignatureValue, KeyInfo, SignedProperties)\n    \\item BASELINE-T: + Timestamp.\n    \\item BASELINE-LT: + Certificates and Revocation Data.\n    \\item BASELINE-LTA: + Archive Timestamping (periodical).\n\\end{itemize}\n\\section{XAdES}\nXAdES: XML Advanced Electronic Signatures, ensures long-term validity.\n\\begin{itemize}\n    \\item \\textbf{XAdES-LT}: SigningCertificate, SignerRole, SignaturePolicyId, SignatureTimeStamp, CompleteCertificateRefs, CompleteRevocationRefs, SigAndRefsTimeStamp.\n    \\item \\textbf{XAdES-LTA}:  All from XAdES-LT + CertificateValues, RevocationValues, ArchiveTimeStamp.\n\\end{itemize}\n\n\\section{Signature Standards}\n\\begin{itemize}\n    \\item \\textbf{PAdES}: PDF signatures, ISO 32000-1.  Embedded in PDF.\n    \\item \\textbf{CAdES}: Extends CMS (PKCS#7). Binary data.\n    \\begin{itemize}\n        \\item Detached: Signature separate.\n        \\item Encapsulated: Data inside signature.\n    \\end{itemize}\n\\end{itemize}\n\n\\section{ETSI Environments}\n\\begin{itemize}\n    \\item \\textbf{Creation}: DA, SCA, User Interface, SCDev\n    \\item \\textbf{Verification}: DA, SVA, User Interface\n    \\item \\textbf{Augmentation}: DA, SAA, User Interface\n\\end{itemize}\n\n\\section{Kerberos}\nNetwork authentication protocol using tickets. Symmetric-key, mutual authentication.\n\\begin{itemize}\n    \\item KDC, UDP 88.\n    \\item  C -> AS -> TGS -> SS.\n\\end{itemize}\n\n\\section{WEP}\nInsecure 802.11 encryption.  40/104-bit keys.  Flawed.\n\n\\section*{WPA/WPA2/WPA3}\n\\begin{itemize}\n    \\item Wi-Fi Security Certifications (WPA, WPA2, WPA3)\n    \\item WPA (TKIP): Interim, replaced WEP\n    \\item WPA2: IEEE 802.11i, CCMP (AES)\n\\end{itemize}\n\n\\section*{TKIP}\n\\begin{itemize}\n    \\item Replaced WEP, now deprecated\n\\end{itemize}\n\n\\section*{Cryptanalysis}\n\\begin{itemize}\n    \\item \\textbf{Ciphertext-only (COA)}: Ciphertexts only\n    \\item \\textbf{Known-plaintext (KPA)}: Plaintext-ciphertext pairs (crib)\n    \\item \\textbf{Chosen-plaintext (CPA)}: Ciphertexts for chosen plaintexts\\\\\n    \\item \\textbf{Adaptive CPA}: CPA, adapts based on previous encryptions\n    \\item \\textbf{Related-key}: Ciphertexts under related keys\n\\end{itemize}",
  "resume": "\nExtracted and summarized the key concepts and definitions from the provided PDF chunk, including Cryptography, Caesar Cipher, ROT13, Scytale, Vigenère Cipher, ADFGVX Cipher, Enigma, Transposition, and Substitution ciphers. Created two LaTeX documents: one for studying and one for in-exam quick reference.\nExtracted and summarized key concepts: Kerckhoffs's Principle, Perfect Secrecy, One-Time Pad (OTP), Confusion, Diffusion, Symmetric Cryptography, Key Establishment, Key Generation, Asymmetric Cryptography and Digital Signature. Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, examples, and key properties for each concept. Added notes to include the images later.\nExtracted and summarized key concepts: Digital Signature (key generation, signing, verification), Security properties (Confidentiality, Integrity, Authenticity, Non-Repudiation), Data Encryption Standard (DES), Feistel Cipher, DES F-Function, DES Key Schedule, and Advanced Encryption Standard (AES). Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, examples, and key properties for each concept. Added notes to include the images later.\nExtracted and summarized key concepts from the provided PDF chunk, including AES (SubBytes, ShiftRows, MixColumns, AddRoundKey), Blowfish, Twofish, Message Authentication, Message Authentication Codes (MAC), and Secure (Cryptographic) Hash Functions. Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, examples, and key properties for each concept. Added notes to include the images later.\nExtracted and summarized key concepts: Authentication with Hash Functions (message authentication with/without encryption, hash function requirements, attacks, properties, and applications), Public-Key vs Symmetric Encryption, Public-Key Encryption (algorithms, confidentiality, integrity, and certificates). Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, examples, and key properties for each concept. Added notes to include the images later.\nExtracted and summarized key concepts: Public-Key Certificates (structure, verification), Digital Envelopes, Electronic Signatures (groups, standards, XAdES). Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, processes, and key properties for each concept. Added notes to include the images later.\nExtracted and summarized key concepts: XAdES (XAdES-LT, XAdES-LTA), PAdES, CAdES, Signature Creation/Verification/Augmentation Environments (ETSI), Kerberos, and WEP. Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions, key properties, and workflows. Marked locations for adding images later.\nExtracted and summarized key concepts: WPA, WPA2, WPA3, TKIP and Cryptanalysis categories (Ciphertext-only, Known-plaintext, Chosen-plaintext, Adaptive chosen-plaintext, Related-key). Created two LaTeX documents: one for studying and one for in-exam quick reference. Included definitions and key properties for each concept."
}